### i. closures
> a closure is a function *<u>plus its surrounding environment</u>*.  
    

```python
>>> def outer():
...    a = -99 
...    b = +99 
...    def inner(x):
...        y = a * x
...        return y
...    return inner

>>> ax = outer()
>>> ax
<function inner at 0x02014B70>
>>> " introspect function inner "
>>> ax.func_code.co_freevars
('a',)
>>> ax.func_closure
(<cell at 0x0203D2F0: int object at 0x01F19038>,)
>>> ax.func_closure[0].cell_contents
-99
```

by introspecting inner function, we can see that  
after the execution of outer function, the local variable `a` and `b` were freed.  
*but its local variable `a` is kept __in secret place__ called `inner.func_closures`*.  
it is <u>*as if the outer function's local variable __a__ was not freed*</u>.  


```python
>>> def ax_b(a=1,b=0):
...   print "f(x) = {}x + {}".format(a,b) 
...   def in_ax_b(x):
...       y = a * x + b
...       return y
...   return in_ax_b 

>>> fx = ax_b(a=2,b=1)
f(x) = 2x + 1
>>> fx(0)
1
>>> fx(1)
3
>>> fx(2)
5
```

### ii. decorators

__<i style='color:green'>original</i> = decorator(<i style='color:green'>original</i>)__  
__decorator takes *function as input* and *return function*__

```python
@decorator
def original():
    pass
```

+ decorators *__keep original function clean__*
+ decorators *__add some functionality to original function__*

step 1. define function `original` and function `decorator`
```python
>>> def original(*args): pass
>>> def decorator(func):
...     def wrapper(*args):
...         print 'calling {}({})'.format(wrapper,args)
...         output = func(*args)
...         return output
...     return wrapper

```

step 2. still `<function original at 0x...>` exists in `globals()`.

```python
>>> original = decorator(original)
>>> original
<function wrapper at 0x...>
```
step 3. <i style="color:red">now, she's gone!!! </i>  

><i style='color:darkred'>at this point, `original` points to `<function wrapper at 0x...>`   
therefore `<function original at 0x...>` does not exist in global environment, it's gone!!!  
so we can not directly call `<function original at 0x...>` any more.  
but it is kept in `<function wrapper at 0x...>`'s __secret place__ called `func_closure`.  </i>

```python
>>> original.func_code.co_varnames
('args','output')
>>> original.func_closure[0].cell_contents
<function original at 0x...>
>>> original(2)  # calling <function wrapper at 0x...>( (2,) )
```

step 4. <i style='color:red'> recursive call</i>  
><i style='color:darkred'>we can not call `<function original at 0x...>` inside `original`    
 actually, we are calling `<function wrapper at 0x...>` in `globals()`</i>

```python
def original(x,recursive = [-1]):
    recursive[0] += 1
    if recursive[0] > 3: return
    print '-> original call {}({}) \trecursion depth = {}'.format(original.__name__,x, recursive[0] )
    original(x)   # we are calling globals['original'] =<function wrapper at 0x...>

def decorator(func):
    def wrapper(x):
        print '... wrapper calls {}({})'.format(func.__name__,x)
        output = func(x)
        return output
    return wrapper

# <function original at 0x02018BF0> exists in global environment
original = decorator(original)
" she's gone!!! "
# at this point, original points to <function wrapper at 0x...> 
# so that <function original> does not exist in global environment, it's gone!!!
# we can not directly call <function original at 0x...> any more.
# but it is kept in <function wrapper at 0x...>'s secret place called func_closure.
original(3)
# calling <function wrapper at 0x...>( (2,) )
```
### iii. decorator and recursive function

>step 1. define factorial function with functionality that can print recursion depth   
 original factorial code is wrapped in two print functions and recursion depth process code.  
 it works fine but its code not clean!!!
 ```python
def factorial(n,recursive = [0]):
    print '-> call\t  {}({})\t\trecursion depth = {}'.format(factorial.func_name,n, recursive[0] )
    recursive[0] += +1
    if n == 1: 
        val = 1
    else:
        val = n * factorial(n-1)
    recursive[0] += -1
    print '<- return {}({}) = {}\trecursion depth = {}'.format(factorial.func_name,n, val,recursive[0] )
    return val

print factorial(5)
```

> step 2. keep original factorial function clean  
 add printing functionality with decorator
```python
def factorial(n):
    ''' after decorated, actually we are calling <function wrapper at 0x..>
    that is, factorial is <function wrapper 0x..> in globals()'''
    if n == 1: return 1
    return n * factorial(n-1)

def decorator(func):
    ''' using function attribute we are printing recursion depth'''
    func.indent = 0
    def wrapper(n):
        " indent -> call factorial(n) "
        print '{}-> call {}({})'.format('  ' * func.indent,func.__name__, n) 
        func.indent += +1
        val = func(n)
        func.indent += -1
        if n == 1: print '-' * 40
        " indent <- return factorial(n) = val "
        print '{}<- return {}({}) = {}'.format('  ' * func.indent, func.__name__, n,val)
        return val
    return wrapper

factorial = decorator(factorial)
factorial(3)
#-> call factorial(3)
#   -> call factorial(2)
#       -> call factorial(1)
#-------------------------------------
#       <- return factorial(1) = 1
#   <- return factorial(2) = 2
#<- return factorial(3) = 6
```
### iv. logging elasped time
```python
    def logtime(func):
        def wrapper(*args):
            start = time.time()
            val = func(*args)
            end = time.time()
            elapsed = end - start
            print '{} elasped'.format(elapsed)
            return val
        return wrapper

    @logtime
    def summation(n):
        sum = 0
        for i in range(1,n+1):
            sum += i
        return sum

    print sum(1000)
```
>*for recursive function, the decorator logtime  reports elasped time whenever  
  original function(fib) recursively call wrapper function.  
  because inside original function(fib) is <function wrapper at 0x...>*.  
  <u>using decorator with recursive function requires extra caution</u>. 

```python
    def fib(n):
        if n==1 or n==0: return 1
        return fib(n-1) + fib(n-2)

    fib1 = logtime(fib)
    print fib1(33)
```
### v. decorators with arguments
`original = decorator(original)` <=> `@decorator ...`  
`original = arg_decorator(*extrarg)(original)` <=> `@arg_decorator(*extrarg)`

step 1. define arg_decorator with extra arguments that returns function decorator   
  `decorator = arg_decorator(*extrarg)`
```python
    def arg_decorator(*extrarg):
        pass
        return decorator
```
step 2. define decorator inside arg_decorator that takes function as argument
> `original = decorator(original)`

```python
    def arg_decorator(*extrarg): # step1
        def decorator(func):     # step2
            def wrapper(*args):
                # do before-processing
                val = func( *(args+extrarg) ):
                # do after-processing
                return val
            return wrapper      # step2
        return decorator        # step1
```
> eventually, it is the same because arg_decorator(*extrarg) return <function decorator at 0x..>
> that is, `arg_decorator(*extrarg) == decorator`
> except `*extrarg` is passed to <function wrapper> with func.

> e.g scale original function's return value
```python
    def arg_decorator(scale=1):
        def decorator(func):
            def wrapper(*args):
                print 'scale = {}'.format(scale)
                val = scale * func(*args) 
                return val
            return wrapper
        return decorator

    @arg_decorator(scale=100)
    def plus(x,y):
        return x+y

    @arg_decorator(scale=0.01)
    def minus(x,y):
        return x-y

    print plus(1,2)
    print minus(1,2)
```

### vii. cascaded decorator
> original = decorator(original) <=> @decorator(original)
```python
    f = A(f)
    'is equivalent to'
    @A
    def f(): pass

    f = A(f)      # wrapper1 = A(f),        f = <function wrapper1 at 0x...>
    f = B(f)      # wrapper2 = B(wrapper1), f = <function wrapper2 at 0x...>
    'is equivalent to'
    f = B(A(f))   # f = <function wrapper2 at 0x...>
    'is equivalent to'
    @B
    @A
    def f(): pass
```
### viii. docstring and help


>+ `original` does not exist in `globals()` any more,
that is, `original` is <function wrapper at 0x>,
`original.__doc__` and `help(original)` are about <function wrapper at 0x...>

```python
>>> def decorator(func):
...     def wrapper(*args):
...         ''' wrapper docstring ... '''
...         val = func(*args)
...         return val
...     return wrapper

>>> def original(*args):
...     ''' original docstring ... '''
...     pass

>>> original = decorator(original)
' wrapper docstring ... '
>>> original.__doc__
Help on function wrapper in module __main__:

wrapper(*args)
    wrapper docstring here
```


>+ name is nothing. it's not real.  
what's important is __the address the name is pointing to__.
```python
>>> def decorator(func):
...     def wrapper(*args):
...         ''' wrapper docstring ... '''
...         val = func(*args)
...         return val
...     wrapper.__name__ = func.__name__
...     wrapper.__doc__ = func.__doc__
...     return wrapper

>>> def original(*args):
...     ''' original docstring ... '''
...     pass

>>> original
# <function original at 0x02E33XXX>
>>> original = decorator(original)
>>> original
# <function original at 0x02E33YYY>
# same name but different address
>>> original.__doc__
' original docstring ... '
>>> help(original)
Help on function original in module __main__:

original(*args)
    original docstring ...
```


>+ using `funcstools.wraps`
```python
from functools import wraps
>>> def decorator(func):
...    @wraps(func)
...    def wrapper(*args):
...        ''' wrapper docstring ... '''
...        val = func(*args)
...        return val
...    # wrapper.__doc__ = func.__doc__
...    # wrapper.__name__ = func.__name__
...    return wrapper

>>> def original(n):
...    ''' original docstring ... '''
...    pass

>>> original
# <function original at 0x02E33XXX>
>>> original = decorator(original)
>>> original
# <function original at 0x02E33YYY>
# same name but different address
>>> original(3)
>>> original.__doc__
>>> help(original)
```
